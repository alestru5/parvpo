events {
    worker_connections 1024; # Максимальное количество подключений на один воркер
    # Этот параметр определяет максимальное количество одновременных подключений, которые может обрабатывать один воркер Nginx.
    # В данном случае установлено значение 1024, что означает, что один воркер может обрабатывать до 1024 одновременных подключений.
}

http {
    access_log off; # Отключение логирования доступа
    # Этот параметр отключает логирование доступа, что может быть полезно для уменьшения нагрузки на диск и улучшения производительности.

    error_log /dev/null crit; # Логирование ошибок только критических уровней
    # Этот параметр настраивает логирование ошибок только для критических уровней (crit), отправляя их в /dev/null, что фактически отключает логирование ошибок.

    upstream consumers {
        server consumer:8080; # Имя сервиса Docker для контейнеров consumer
        # Определяет группу серверов (upstream), на которые будут перенаправляться запросы.
        # В данном случае, запросы будут перенаправляться на сервер с именем "consumer" на порту 8080.
        # Вы можете добавить дополнительные серверы, раскомментировав строки ниже.
    }

    server {
        listen 80; # Прослушиваем порт 80 для внешних запросов
        # Этот параметр указывает Nginx прослушивать порт 80 для входящих запросов.

        # Логика маршрутизации для /data
        location /data {
            proxy_pass http://consumers/data; # Перенаправляем на upstream consumers
            # Этот параметр указывает Nginx перенаправлять запросы, поступающие на /data, на upstream группу "consumers" с добавлением /data к URL.
            proxy_set_header Host $host;
            # Устанавливает заголовок Host в запросе, перенаправляемом на upstream сервер, равным значению заголовка Host в исходном запросе.
            proxy_set_header X-Real-IP $remote_addr;
            # Устанавливает заголовок X-Real-IP в запросе, перенаправляемом на upstream сервер, равным IP-адресу клиента.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Устанавливает заголовок X-Forwarded-For в запросе, перенаправляемом на upstream сервер, добавляя IP-адрес клиента к списку.
            proxy_set_header X-Forwarded-Proto $scheme;
            # Устанавливает заголовок X-Forwarded-Proto в запросе, перенаправляемом на upstream сервер, равным протоколу (http или https) исходного запроса.
        }

        # Логика маршрутизации для /end
        location /end {
            proxy_pass http://consumers/end; # Перенаправляем на upstream consumers
            # Этот параметр указывает Nginx перенаправлять запросы, поступающие на /end, на upstream группу "consumers" с добавлением /end к URL.
            proxy_set_header Host $host;
            # Устанавливает заголовок Host в запросе, перенаправляемом на upstream сервер, равным значению заголовка Host в исходном запросе.
            proxy_set_header X-Real-IP $remote_addr;
            # Устанавливает заголовок X-Real-IP в запросе, перенаправляемом на upstream сервер, равным IP-адресу клиента.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Устанавливает заголовок X-Forwarded-For в запросе, перенаправляемом на upstream сервер, добавляя IP-адрес клиента к списку.
            proxy_set_header X-Forwarded-Proto $scheme;
            # Устанавливает заголовок X-Forwarded-Proto в запросе, перенаправляемом на upstream сервер, равным протоколу (http или https) исходного запроса.
        }
    }
}
